function [Y,Xf,Af] = modelApprox(X,~,~)
%MODELAPPROX neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 30-Aug-2018 20:25:32.
% 
% [Y] = modelApprox(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 3.62e-05;
x1_step1.gain = 0.31831251078781;
x1_step1.ymin = -1;

% Layer 1
b1 = [-37.3738954921271187;-26.54783844799815995;-18.34229879219695647;-19.388174781000266478;20.641902656211300382;-23.150548800912623904;-20.128930163457642522;19.816423248597960338;-10.44335399518218388;-8.6667339805611156578;7.8852438587717159635;7.9845131565801779061;3.116094456004990132;2.0989305535823632454;-1.0915759517678222945;0.48866725486661405364;-1.9281282377229156388;-3.5899022150655248709;4.0687354463520382097;5.3686739385532753488;13.750228757591321127;17.193998026254476486;-23.391370606833746137;-25.786661007133787393;30.949759272889103556;-20.871550050622495576;-20.101539133335151632;25.733271282666461133;-34.543689029252860223;45.045333504767882005];
IW1_1 = [36.944573969753541576;28.149095312300431715;21.009607503598150657;24.584766503419523076;-28.325242141386279826;34.533879346591447757;33.122098081533856373;-37.687465805565423693;24.378167245354582349;24.458793041742350027;-28.672497273716558652;-35.201534184595210775;-18.218634034295682511;-25.325211844326840804;36.316879835740969895;32.209460577560122374;-25.018945871625589916;-25.257237886570440111;18.852154451390092049;17.196322358501276995;34.812491991465542185;37.352435998132257566;-45.362457364818688177;-43.228920273969656307;47.300534001622359881;-28.700993544283594616;-25.146566089938581001;29.704375403582890414;-37.384969380694819563;46.195619225143254027];

% Layer 2
b2 = 0.10422379634773305812;
LW2_1 = [0.1371286255169352486 0.059015609769549462471 0.10009907606033083272 0.062734305744229751367 -0.039967698292517797598 0.032632957162001832718 0.026965596906750557982 -0.0082744811693897957899 -0.017902357082190362841 -0.042989902055929750391 0.047975932482213226593 0.0097437966339829710366 0.11726701820966932421 0.072714197454182033509 -0.039752119424130386016 -0.057905465346276135952 0.074424139793396487663 0.062167751841323712347 -0.080225267846264977645 -0.07048398576535071236 -0.018213832435597442777 -0.0075627138623900573566 -0.0061199190895392125561 -0.022626398369015563589 0.028335198505216596665 -0.056687440548575329657 -0.069373470826734839889 0.064380857335691654697 -0.057603633962674732905 0.055475167640707055694];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.715765689228962;
y1_step1.xoffset = -1.39593126188882;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
