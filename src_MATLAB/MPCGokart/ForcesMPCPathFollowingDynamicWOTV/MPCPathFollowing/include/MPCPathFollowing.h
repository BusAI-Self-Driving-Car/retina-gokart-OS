/*
MPCPathFollowing : A fast customized optimization solver.

Copyright (C) 2013-2019 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

/* Generated by FORCES PRO v1.8.0 on Tuesday, June 18, 2019 at 9:29:14 AM */

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif

#ifndef MPCPathFollowing_H
#define MPCPathFollowing_H

/* DATA TYPE ------------------------------------------------------------*/
typedef double MPCPathFollowing_float;

typedef double MPCPathFollowinginterface_float;

#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_MPCPathFollowing
#define MISRA_C_MPCPathFollowing (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_MPCPathFollowing
#define RESTRICT_CODE_MPCPathFollowing (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_MPCPathFollowing
#define SET_PRINTLEVEL_MPCPathFollowing    (2)
#endif

/* timing */
#ifndef SET_TIMING_MPCPathFollowing
#define SET_TIMING_MPCPathFollowing    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_MPCPathFollowing			(200)	

/* scaling factor of line search (FTB rule) */
#define SET_FLS_SCALE_MPCPathFollowing		(MPCPathFollowing_float)(0.99)      

/* maximum number of supported elements in the filter */
#define MAX_FILTER_SIZE_MPCPathFollowing	(200) 

/* maximum number of supported elements in the filter */
#define MAX_SOC_IT_MPCPathFollowing			(4) 

/* desired relative duality gap */
#define SET_ACC_RDGAP_MPCPathFollowing		(MPCPathFollowing_float)(0.0001)

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_MPCPathFollowing		(MPCPathFollowing_float)(1E-06)

/* desired maximum residual on inequality constraints */
#define SET_ACC_RESINEQ_MPCPathFollowing	(MPCPathFollowing_float)(1E-06)

/* desired maximum violation of complementarity */
#define SET_ACC_KKTCOMPL_MPCPathFollowing	(MPCPathFollowing_float)(1E-06)


/* RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_MPCPathFollowing      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_MPCPathFollowing (0)

/* wrong number of inequalities error */
#define INVALID_NUM_INEQ_ERROR_MPCPathFollowing  (-4)

/* factorization error */
#define FACTORIZATION_ERROR_MPCPathFollowing   (-5)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_MPCPathFollowing  (-6)

/* no progress in method possible */
#define NOPROGRESS_MPCPathFollowing   (-7)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_MPCPathFollowing   (-11)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_MPCPathFollowing  (-100)



/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
    /* vector of size 434 */
    MPCPathFollowing_float x0[434];

    /* vector of size 9 */
    MPCPathFollowing_float xinit[9];

    /* vector of size 1054 */
    MPCPathFollowing_float all_parameters[1054];


} MPCPathFollowing_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
    /* vector of size 434 */
    MPCPathFollowing_float alldata[434];


} MPCPathFollowing_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
    /* iteration number */
    solver_int32_default it;

	/* number of iterations needed to optimality (branch-and-bound) */
	solver_int32_default it2opt;
	
    /* inf-norm of equality constraint residuals */
    MPCPathFollowing_float res_eq;
	
    /* inf-norm of inequality constraint residuals */
    MPCPathFollowing_float res_ineq;

	/* norm of stationarity condition */
    MPCPathFollowing_float rsnorm;

	/* max of all complementarity violations */
    MPCPathFollowing_float rcompnorm;

    /* primal objective */
    MPCPathFollowing_float pobj;	
	
    /* dual objective */
    MPCPathFollowing_float dobj;	

    /* duality gap := pobj - dobj */
    MPCPathFollowing_float dgap;		
	
    /* relative duality gap := |dgap / pobj | */
    MPCPathFollowing_float rdgap;		

    /* duality measure */
    MPCPathFollowing_float mu;

	/* duality measure (after affine step) */
    MPCPathFollowing_float mu_aff;
	
    /* centering parameter */
    MPCPathFollowing_float sigma;
	
    /* number of backtracking line search steps (affine direction) */
    solver_int32_default lsit_aff;
    
    /* number of backtracking line search steps (combined direction) */
    solver_int32_default lsit_cc;
    
    /* step size (affine direction) */
    MPCPathFollowing_float step_aff;
    
    /* step size (combined direction) */
    MPCPathFollowing_float step_cc;    

	/* solvertime */
	MPCPathFollowing_float solvetime;   

	/* time spent in function evaluations */
	MPCPathFollowing_float fevalstime;  

} MPCPathFollowing_info;







/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* User License expires on: (UTC) Thursday, November 7, 2019 9:00:00 PM (approx.) */
/* Solver License expires on: (UTC) Thursday, November 7, 2019 9:00:00 PM (approx.) */
/* Solver Generation Request Id: 48529ce9-1165-4f66-92fb-fe1886c987e3 */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef void (*MPCPathFollowing_extfunc)(MPCPathFollowing_float* x, MPCPathFollowing_float* y, MPCPathFollowing_float* lambda, MPCPathFollowing_float* params, MPCPathFollowing_float* pobj, MPCPathFollowing_float* g, MPCPathFollowing_float* c, MPCPathFollowing_float* Jeq, MPCPathFollowing_float* h, MPCPathFollowing_float* Jineq, MPCPathFollowing_float* H, solver_int32_default stage, solver_int32_default iterations);

extern solver_int32_default MPCPathFollowing_solve(MPCPathFollowing_params *params, MPCPathFollowing_output *output, MPCPathFollowing_info *info, FILE *fs, MPCPathFollowing_extfunc evalextfunctions_MPCPathFollowing);	





#ifdef __cplusplus
}
#endif

#endif
