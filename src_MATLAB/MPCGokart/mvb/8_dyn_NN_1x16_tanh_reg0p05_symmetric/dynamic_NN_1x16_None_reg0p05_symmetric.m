function [ACCX,ACCY,ACCROTZ] = dynamic_NN_1x16_None_reg0p05_symmetric(VELX,VELY,VELROTZ,BETA,AB,TV, param)
    %param = [B1,C1,D1,B2,C2,D2,Ic];
    B1 = param(1);
    C1 = param(2);
    D1 = param(3);
    B2 = param(4);
    C2 = param(5);
    D2 = param(6);
    Ic = param(7);
    %maxA = param(8);
    magic = @(s,B,C,D)D.*sin(C.*atan(B.*s));
    reg = 0.5;
    capfactor = @(taccx)(1-satfun((taccx/D2)^2))^(1/2);
    simpleslip = @(VELY,VELX,taccx)-(1/capfactor(taccx))*VELY/(VELX+reg);
    %simpleslip = @(VELY,VELX,taccx)-VELY/(VELX+reg);
    simplediraccy = @(VELY,VELX,taccx)magic(simpleslip(VELY,VELX,taccx),B2,C2,D2);
    simpleaccy = @(VELY,VELX,taccx)capfactor(taccx)*simplediraccy(VELY,VELX,taccx);
    %acclim = @(VELY,VELX, taccx)(VELX^2+VELY^2)*taccx^2-VELX^2*maxA^2;
    simplefaccy = @(VELY,VELX)magic(-VELY/(VELX+reg),B1,C1,D1);
    %simpleaccy = @(VELY,VELX,taccx)magic(-VELY/(VELX+reg),B2,C2,D2);



    l = 1.19;
    l1 = 0.73;
    l2 = l-l1;
    f1n = l2/l;
    f2n = l1/l;
    w = 1;
    rotmat = @(beta)[cos(beta),sin(beta);-sin(beta),cos(beta)];
    vel1 = rotmat(BETA)*[VELX;VELY+l1*VELROTZ];
    f1y = simplefaccy(vel1(2),vel1(1));
    F1 = rotmat(-BETA)*[0;f1y]*f1n;
    F1x = F1(1);
    F1y = F1(2);
    frontabcorr = F1x;
    F2x = AB;
    F2y1 = simpleaccy(VELY-l2*VELROTZ,VELX,(AB+TV/2)/f2n)*f2n/2;
    F2y2 = simpleaccy(VELY-l2*VELROTZ,VELX,(AB-TV/2)/f2n)*f2n/2;
    F2y = simpleaccy(VELY-l2*VELROTZ,VELX,AB/f2n)*f2n;
    TVTrq = TV*w;
    
    
    ACCROTZ_NOM = (TVTrq + F1y*l1 -F2y*l2)/Ic;
    %ACCROTZ = TVTrq + F1y*l1;
    ACCX_NOM = F1x+F2x+VELROTZ*VELY;
    ACCY_NOM = F1y+F2y1+F2y2-VELROTZ*VELX;
    
    w1 = [1.1577732e-35 1.287957e-38 -1.940654e-35 -3.5407698e-35 1.239601e-06 4.6999186e-35 9.80318e-35 4.0792641e-35 -1.1450699e-34 -7.4420536e-35 5.0018105e-35 -5.3651215e-35 4.3449755e-35 2.1074668e-36 3.5257423e-35 -3.010954e-36;-0.06402616 -0.06402616 -0.077228 -0.06402616 1.3219569 -0.08909743 -0.077228 0.06402616 0.06402616 -0.06402616 0.08909743 0.06402616 -0.08909743 -0.06402616 -0.06402616 0.06402616;-0.21630926 -0.21630926 -0.33439788 -0.21630926 0.14167607 -0.09724604 -0.33439788 0.21630926 0.21630926 -0.21630926 0.09724604 0.21630926 -0.09724604 -0.21630926 -0.21630926 0.21630926;0.019548917 0.019548917 0.08099584 0.019548917 -0.26005256 0.0020186382 0.08099584 -0.019548917 -0.019548917 0.019548917 -0.0020186382 -0.019548917 0.0020186382 0.019548917 0.019548917 -0.019548917;4.0690608e-36 2.3241902e-35 -3.3861452e-35 4.7490985e-35 1.7172074e-07 2.555479e-35 -6.940414e-35 1.3528608e-35 -5.3705405e-36 5.5311635e-35 -2.7626195e-35 4.7621144e-35 1.11832166e-35 -2.1917617e-36 8.516299e-35 -2.586047e-35;-0.24156629 -0.24156629 0.38190693 -0.24156629 -0.58163416 -0.29548904 0.38190693 0.24156629 0.24156629 -0.24156629 0.29548904 0.24156629 -0.29548904 -0.24156629 -0.24156629 0.24156629];
    b1 = [4.8939997e-35 1.0731259e-34 1.1157644e-34 -5.3227406e-35 4.4650992e-07 -5.0992876e-35 3.5809335e-35 2.071411e-35 3.5532947e-35 -2.0942086e-35 9.912404e-35 -4.0321192e-36 1.0214219e-34 -6.5816107e-35 8.800155e-35 7.906402e-35];
    w2 = [4.955504e-35;-3.523334e-35;-8.2607894e-36;-5.5600665e-35;-1.264353e-07;-3.887993e-35;3.6756342e-35;7.94533e-35;1.3574228e-35;6.8439497e-35;-5.7244067e-35;5.0157965e-35;-6.5304164e-35;-4.864933e-36;-5.52922e-35;-3.8240796e-36];
    b2 = 0.003638916;
    w3 = [-0.24855934 0.30360016;-0.24855934 0.30360016;-0.33717278 -0.43898135;-0.24855934 0.30360016;1.2452238 0.7630032;-0.13485947 0.36182368;-0.33717278 -0.43898135;0.24855934 -0.30360016;0.24855934 -0.30360016;-0.24855934 0.30360016;0.13485947 -0.36182368;0.24855934 -0.30360016;-0.13485947 0.36182368;-0.24855934 0.30360016;-0.24855934 0.30360016;0.24855934 -0.30360016];
    means = [2.6775749832578986 0.001922168301437502 -0.04515304867653743 -0.026195759869689427 0.06460829512732788 -0.0686602322088558];
    stds = [1.907241556285694 0.3079627568782051 0.5515613235298231 0.20101736434516326 0.8309067855283836 0.634574245360539];

    input = [VELX - means(1),VELY,VELROTZ,BETA,AB - means(5),TV];

    normed_input = input ./ stds;
    normed_input_neg = normed_input .* [1,-1,-1,-1,1,-1];

    h1 = tanh(normed_input * w1 + b1);
    h1_neg = tanh(normed_input_neg * w1 + b1);
    
    h1_even = (h1 + h1_neg) / 2;
    h1_odd = (h1 - h1_neg) / 2;
    
    ACC_odd = h1_odd * w3;
    
    ACCX = ACCX_NOM + h1_even * w2 + b2;
    ACCY = ACCY_NOM + ACC_odd(1);
    ACCROTZ = ACCROTZ_NOM + ACC_odd(2);
end

