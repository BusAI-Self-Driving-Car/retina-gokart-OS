function [ACCX,ACCY,ACCROTZ] = dynamic_NN_1x16_None_reg0p1_symmetric(VELX,VELY,VELROTZ,BETA,AB,TV, param)
    %param = [B1,C1,D1,B2,C2,D2,Ic];
    B1 = param(1);
    C1 = param(2);
    D1 = param(3);
    B2 = param(4);
    C2 = param(5);
    D2 = param(6);
    Ic = param(7);
    %maxA = param(8);
    magic = @(s,B,C,D)D.*sin(C.*atan(B.*s));
    reg = 0.5;
    capfactor = @(taccx)(1-satfun((taccx/D2)^2))^(1/2);
    simpleslip = @(VELY,VELX,taccx)-(1/capfactor(taccx))*VELY/(VELX+reg);
    %simpleslip = @(VELY,VELX,taccx)-VELY/(VELX+reg);
    simplediraccy = @(VELY,VELX,taccx)magic(simpleslip(VELY,VELX,taccx),B2,C2,D2);
    simpleaccy = @(VELY,VELX,taccx)capfactor(taccx)*simplediraccy(VELY,VELX,taccx);
    %acclim = @(VELY,VELX, taccx)(VELX^2+VELY^2)*taccx^2-VELX^2*maxA^2;
    simplefaccy = @(VELY,VELX)magic(-VELY/(VELX+reg),B1,C1,D1);
    %simpleaccy = @(VELY,VELX,taccx)magic(-VELY/(VELX+reg),B2,C2,D2);



    l = 1.19;
    l1 = 0.73;
    l2 = l-l1;
    f1n = l2/l;
    f2n = l1/l;
    w = 1;
    rotmat = @(beta)[cos(beta),sin(beta);-sin(beta),cos(beta)];
    vel1 = rotmat(BETA)*[VELX;VELY+l1*VELROTZ];
    f1y = simplefaccy(vel1(2),vel1(1));
    F1 = rotmat(-BETA)*[0;f1y]*f1n;
    F1x = F1(1);
    F1y = F1(2);
    frontabcorr = F1x;
    F2x = AB;
    F2y1 = simpleaccy(VELY-l2*VELROTZ,VELX,(AB+TV/2)/f2n)*f2n/2;
    F2y2 = simpleaccy(VELY-l2*VELROTZ,VELX,(AB-TV/2)/f2n)*f2n/2;
    F2y = simpleaccy(VELY-l2*VELROTZ,VELX,AB/f2n)*f2n;
    TVTrq = TV*w;
    
    
    ACCROTZ_NOM = (TVTrq + F1y*l1 -F2y*l2)/Ic;
    %ACCROTZ = TVTrq + F1y*l1;
    ACCX_NOM = F1x+F2x+VELROTZ*VELY;
    ACCY_NOM = F1y+F2y1+F2y2-VELROTZ*VELX;
    
    w1 = [-1.7584471e-35 3.2530463e-35 -4.1402283e-35 -2.425023e-35 4.5650716e-35 3.2507656e-35 2.8802923e-35 -2.8011003e-35 -2.1400486e-35 1.2356248e-35 2.0150192e-35 5.8168466e-35 1.08433844e-35 -5.7459903e-35 -2.817607e-35 2.0137571e-35;0.055680554 0.055680554 0.055680554 -0.055680554 0.055680554 -0.055680554 0.055680554 -0.3144115 -0.055680554 0.055680554 0.055680554 0.055680554 0.055680554 0.055680554 0.055680554 0.055680554;0.13728184 0.13728184 0.13728184 -0.13728184 0.13728184 -0.13728184 0.13728184 -0.2167437 -0.13728184 0.13728184 0.13728184 0.13728184 0.13728184 0.13728184 0.13728184 0.13728184;0.030910958 0.030910958 0.030910958 -0.030910958 0.030910958 -0.030910958 0.030910958 0.01668174 -0.030910958 0.030910958 0.030910958 0.030910958 0.030910958 0.030910958 0.030910958 0.030910958;3.3772197e-35 4.314368e-35 7.88645e-36 2.0540777e-35 1.68911e-35 3.998761e-35 -9.895295e-36 4.3381837e-35 1.4489518e-35 3.0605514e-35 2.1806185e-35 -5.0761577e-35 -1.6414266e-36 -4.995778e-35 4.8013308e-35 -4.2996332e-35;0.2382894 0.2382894 0.2382894 -0.2382894 0.2382894 -0.2382894 0.2382894 0.3907216 -0.2382894 0.2382894 0.2382894 0.2382894 0.2382894 0.2382894 0.2382894 0.2382894];
    b1 = [3.3840278e-35 -2.1341994e-35 -3.2141554e-35 -2.7691375e-35 2.2665635e-35 -1.6060316e-35 -4.6917894e-36 2.459014e-35 -2.4047254e-35 -2.8109893e-35 -1.9204247e-35 6.3496956e-36 1.13615776e-35 -4.4801086e-35 -5.305816e-35 1.0126444e-35];
    w2 = [-3.745516e-35;-2.3257693e-36;-4.350155e-36;3.9193642e-35;3.8970545e-35;-4.229182e-35;-1.2387945e-35;2.2859218e-36;-5.3985984e-35;-3.3498214e-35;-2.2080097e-35;-2.279899e-35;-3.2581676e-35;-5.699126e-35;2.1062184e-36;-7.724544e-36];
    b2 = 0.002948288;
    w3 = [0.15520203 -0.2894776;0.15520203 -0.2894776;0.15520203 -0.2894776;-0.15520203 0.2894776;0.15520203 -0.2894776;-0.15520203 0.2894776;0.15520203 -0.2894776;-0.396148 -0.41058388;-0.15520203 0.2894776;0.15520203 -0.2894776;0.15520203 -0.2894776;0.15520203 -0.2894776;0.15520203 -0.2894776;0.15520203 -0.2894776;0.15520203 -0.2894776;0.15520203 -0.2894776];
    means = [2.6775749832578986 0.001922168301437502 -0.04515304867653743 -0.026195759869689427 0.06460829512732788 -0.0686602322088558];
    stds = [1.907241556285694 0.3079627568782051 0.5515613235298231 0.20101736434516326 0.8309067855283836 0.634574245360539];

    input = [VELX - means(1),VELY,VELROTZ,BETA,AB - means(5),TV];

    normed_input = input ./ stds;
    normed_input_neg = normed_input .* [1,-1,-1,-1,1,-1];

    h1 = tanh(normed_input * w1 + b1);
    h1_neg = tanh(normed_input_neg * w1 + b1);
    
    h1_even = (h1 + h1_neg) / 2;
    h1_odd = (h1 - h1_neg) / 2;
    
    ACC_odd = h1_odd * w3;
    
    ACCX = ACCX_NOM + h1_even * w2 + b2;
    ACCY = ACCY_NOM + ACC_odd(1);
    ACCROTZ = ACCROTZ_NOM + ACC_odd(2);
end

